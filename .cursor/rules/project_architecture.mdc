---
description: Kurtosis Sync Test project architecture and structure
globs:
  - "**/*.sh"
  - "**/*.yaml"
  - "**/Makefile"
alwaysApply: false
---

# Project Architecture

## Overview
The kurtosis-sync-test project is an automated testing framework for validating Ethereum client synchronization capabilities across different networks and client combinations.

## Project Structure

### Core Components

1. **Test Orchestration Scripts**
   - `synctest.sh`: Main test orchestration script that handles the sync test workflow
   - `oneliner.sh`: Continuous testing loop for automated client combination testing
   - `Makefile`: Simple interface for common operations

2. **Network Configurations**
   - `mainnet/`: Mainnet-specific client configurations
   - `sepolia/`: Sepolia testnet configurations  
   - `hoodi/`: Hoodi testnet configurations
   - `kurtosis-config.yaml`: Default test configuration template

3. **Deployment Automation**
   - `ansible/`: Complete Ansible deployment setup
     - `playbook.yaml`: Main deployment playbook
     - `roles/kurtosis_sync_test/`: Ansible role for service deployment
     - `files/`: Systemd service definitions

## Architecture Patterns

### Test Workflow
1. Spin up Kurtosis testnet with multiple client pairs
2. Stop non-validating clients immediately
3. Let network run and produce blocks (configurable duration)
4. Restart stopped clients to test sync capability
5. Use Assertoor for validation
6. Collect and report metrics

### Client Configuration Structure
Each network directory contains YAML files for different execution clients:
- `{network}-geth.yaml`
- `{network}-nethermind.yaml`
- `{network}-reth.yaml`
- `{network}-besu.yaml`
- `{network}-erigon.yaml`

### Service Architecture
- Runs as systemd service via Ansible deployment
- Supports both interactive and automated modes
- Integrates with VictoriaMetrics for metrics collection

## Technology Stack

### Core Technologies
- **Kurtosis**: Container orchestration for Ethereum testnets
- **Docker**: Container runtime for client deployment
- **Ansible**: Infrastructure automation
- **Bash**: Primary scripting language

### Ethereum Clients
- **Execution Layer**: Geth, Nethermind, Reth, Besu, Erigon
- **Consensus Layer**: Lighthouse, Teku

### Supporting Tools
- **Assertoor**: Network testing and validation
- **VictoriaMetrics**: Time-series metrics storage
- **jq/yq**: JSON/YAML processing
- **curl**: API interactions

## Configuration Management

### Environment Variables
- `WAIT_TIME`: Duration to wait before restarting clients
- `METRICS_URL`: VictoriaMetrics endpoint
- `METRICS_USER`/`METRICS_PASSWORD`: Authentication credentials

### Test Parameters
- Client pair combinations (EL/CL)
- Network selection (mainnet/sepolia/hoodi)
- Validator distribution
- Additional services (dora, tx_fuzz, spamoor)

## Build and Deployment

### Local Development
- Direct script execution: `./synctest.sh`
- Make targets: `make run`, `make run-no-wait`

### Production Deployment
- Ansible-based deployment to remote hosts
- Systemd service management
- Automated dependency installation

## Metrics and Monitoring

### Collected Metrics
- Sync duration (start/end timestamps)
- Database sizes post-sync
- Client sync status
- Test pass/fail results

### Data Storage
- Local CSV files for raw data
- VictoriaMetrics for time-series analysis
- Structured logging for debugging