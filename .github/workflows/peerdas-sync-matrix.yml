name: PeerDAS Sync Test Matrix

on:
  workflow_dispatch:
    inputs:
      devnet:
        description: 'Devnet to test'
        required: true
        type: choice
        options:
          - fusaka-devnet-1
          - fusaka-devnet-0
          - fusaka-devnet-2
        default: 'fusaka-devnet-1'
      
      el_client:
        description: 'Execution layer client'
        required: true
        type: choice
        options:
          - geth
          - nethermind
          - reth
          - besu
          - erigon
        default: 'geth'
      
      cl_clients:
        description: 'Comma-separated list of CL clients to test (e.g., lighthouse,teku,prysm)'
        required: true
        type: string
        default: 'lighthouse,teku,prysm,nimbus,lodestar,grandine'
      
      timeout:
        description: 'Timeout in seconds for each test'
        required: false
        type: number
        default: 1800
      
      genesis_sync:
        description: 'Use genesis sync instead of checkpoint sync'
        required: false
        type: boolean
        default: false

# Allow only one concurrent deployment per devnet
concurrency:
  group: "peerdas-sync-${{ github.event.inputs.devnet }}"
  cancel-in-progress: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # First job: Parse the CL clients input and create a matrix
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Parse CL clients and create matrix
        id: set-matrix
        run: |
          # Parse comma-separated CL clients
          CL_CLIENTS="${{ github.event.inputs.cl_clients }}"
          
          # Convert to JSON array
          MATRIX_JSON='{"cl_client":['
          FIRST=true
          
          IFS=',' read -ra CLIENTS <<< "$CL_CLIENTS"
          for client in "${CLIENTS[@]}"; do
            # Trim whitespace
            client=$(echo "$client" | xargs)
            
            # Validate client
            if [[ "$client" =~ ^(lighthouse|teku|prysm|nimbus|lodestar|grandine)$ ]]; then
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                MATRIX_JSON+=','
              fi
              MATRIX_JSON+="\"$client\""
            else
              echo "Warning: Skipping invalid client '$client'"
            fi
          done
          
          MATRIX_JSON+=']}'
          
          echo "Generated matrix: $MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  # Second job: Run PeerDAS sync tests for each CL client
  peerdas-sync-test:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y jq curl gettext-base
          
          # Install yq
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Install Kurtosis
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli
          
          # Verify installation
          kurtosis version
      
      - name: Run PeerDAS sync test
        id: sync-test
        run: |
          # Build command
          CMD="./peerdas-sync-test.sh"
          CMD="$CMD -d ${{ github.event.inputs.devnet }}"
          CMD="$CMD -e ${{ github.event.inputs.el_client }}"
          CMD="$CMD -c ${{ matrix.cl_client }}"
          CMD="$CMD -t ${{ github.event.inputs.timeout }}"
          
          if [ "${{ github.event.inputs.genesis_sync }}" = "true" ]; then
            CMD="$CMD --genesis-sync"
          fi
          
          echo "Running: $CMD"
          
          # Create sync-test-results directory for compatibility with our save script
          mkdir -p sync-test-results
          
          # Record start time
          start_time=$(date +%s)
          
          # Run test and capture result
          if $CMD; then
            result="success"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            result="failure"
            echo "result=failure" >> $GITHUB_OUTPUT
          fi
          
          # Record end time and calculate duration
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          # Create metadata JSON for compatibility with our save system
          cat > sync-test-results/metadata.json << EOF
          {
            "result": "$result",
            "network": "${{ github.event.inputs.devnet }}",
            "el_client": "${{ github.event.inputs.el_client }}",
            "cl_client": "${{ matrix.cl_client }}",
            "start_time": $start_time,
            "end_time": $end_time,
            "duration": $duration,
            "test_type": "peerdas",
            "genesis_sync": "${{ github.event.inputs.genesis_sync }}",
            "enclave_name": "peerdas-sync-${{ matrix.cl_client }}-$(date +%s)",
            "github_run_id": "${{ github.run_id }}",
            "github_run_number": "${{ github.run_number }}"
          }
          EOF
      
      - name: Save results to data branch
        if: always()
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # Run our save script to store results in data branch
          bash .github/scripts/save-test-results.sh
      
      - name: Upload test logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: peerdas-logs-${{ github.event.inputs.devnet }}-${{ github.event.inputs.el_client }}-${{ matrix.cl_client }}
          path: logs/
          retention-days: 7
      
      - name: Display test summary
        run: |
          echo "## PeerDAS Sync Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Devnet:** ${{ github.event.inputs.devnet }}" >> $GITHUB_STEP_SUMMARY
          echo "**EL Client:** ${{ github.event.inputs.el_client }}" >> $GITHUB_STEP_SUMMARY
          echo "**CL Client:** ${{ matrix.cl_client }}" >> $GITHUB_STEP_SUMMARY
          echo "**Result:** ${{ steps.sync-test.outputs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Genesis Sync:** ${{ github.event.inputs.genesis_sync }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View historical results at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY

  # Third job: Aggregate results
  aggregate-results:
    needs: peerdas-sync-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: peerdas-logs-*
          path: ./all-logs
      
      - name: Create summary report
        run: |
          echo "## PeerDAS Sync Test Matrix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Devnet:** ${{ github.event.inputs.devnet }}" >> $GITHUB_STEP_SUMMARY
          echo "**EL Client:** ${{ github.event.inputs.el_client }}" >> $GITHUB_STEP_SUMMARY
          echo "**CL Clients:** ${{ github.event.inputs.cl_clients }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timeout:** ${{ github.event.inputs.timeout }}s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count successful tests
          success_count=0
          total_count=0
          
          for log_dir in all-logs/peerdas-logs-*/; do
            if [ -d "$log_dir" ]; then
              total_count=$((total_count + 1))
              # Check for success indicators in logs
              if grep -q "Sync test completed successfully" "$log_dir"/*.log 2>/dev/null; then
                success_count=$((success_count + 1))
              fi
            fi
          done
          
          echo "**Results:** $success_count/$total_count tests passed" >> $GITHUB_STEP_SUMMARY