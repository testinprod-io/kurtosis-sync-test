name: Comprehensive Sync Test

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Scope of testing'
        required: true
        type: choice
        options:
          - all-clients
          - custom
        default: 'all-clients'
      
      el_clients:
        description: 'EL clients to test (comma-separated for custom scope)'
        required: false
        type: string
        default: 'geth,nethermind,reth,besu,erigon'
      
      cl_clients:
        description: 'CL clients to test (comma-separated for custom scope)'
        required: false
        type: string
        default: 'lighthouse,teku,prysm,nimbus,lodestar,grandine'
      
      wait_time:
        description: 'Wait time in seconds'
        required: false
        type: number
        default: 1800
  
  schedule:
    # Run comprehensive test weekly on Sundays at 3:00 AM UTC
    - cron: '0 3 * * 0'

# Allow only one concurrent deployment
concurrency:
  group: "comprehensive-sync-test"
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.combinations }}
    
    steps:
      - name: Generate test matrix
        id: matrix
        run: |
          # Set defaults for scheduled runs
          if [ "${{ github.event_name }}" == "schedule" ]; then
            NETWORKS="fusaka-devnet-1"
            EL_CLIENTS="geth,nethermind,reth,besu,erigon"
            CL_CLIENTS="lighthouse,teku,prysm,nimbus,lodestar,grandine"
          else
            case "${{ github.event.inputs.test_scope }}" in
              "all-clients")
                NETWORKS="fusaka-devnet-1"
                EL_CLIENTS="geth,nethermind,reth,besu,erigon"
                CL_CLIENTS="lighthouse,teku,prysm,nimbus,lodestar,grandine"
                ;;
              "custom")
                NETWORKS="fusaka-devnet-1"
                EL_CLIENTS="${{ github.event.inputs.el_clients }}"
                CL_CLIENTS="${{ github.event.inputs.cl_clients }}"
                ;;
            esac
          fi
          
          # Generate matrix combinations
          combinations="["
          first=true
          
          IFS=',' read -ra NETWORK_ARRAY <<< "$NETWORKS"
          IFS=',' read -ra EL_ARRAY <<< "$EL_CLIENTS"
          IFS=',' read -ra CL_ARRAY <<< "$CL_CLIENTS"
          
          for network in "${NETWORK_ARRAY[@]}"; do
            for el_client in "${EL_ARRAY[@]}"; do
              for cl_client in "${CL_ARRAY[@]}"; do
                if [ "$first" = true ]; then
                  first=false
                else
                  combinations+=","
                fi
                combinations+="{\"network\":\"${network// /}\",\"el_client\":\"${el_client// /}\",\"cl_client\":\"${cl_client// /}\"}"
              done
            done
          done
          
          combinations+="]"
          
          echo "Generated matrix: $combinations"
          echo "combinations=$combinations" >> $GITHUB_OUTPUT

  sync-test:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3  # Limit concurrent tests to avoid resource issues
      matrix:
        include: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run sync test
        uses: ./
        id: sync-test
        with:
          network: ${{ matrix.network }}
          el_client: ${{ matrix.el_client }}
          cl_client: ${{ matrix.cl_client }}
          wait_time: ${{ github.event.inputs.wait_time || '1800' }}
          generate_html_report: 'false'
          save_to_data_branch: 'true'
          config_file: 'devnet-templates/devnet-template.yaml'
      
      - name: Upload individual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-${{ matrix.network }}-${{ matrix.el_client }}-${{ matrix.cl_client }}
          path: |
            sync-test-results/
            reports/
          retention-days: 30

  generate-summary:
    needs: [prepare-matrix, sync-test]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-results
      
      - name: Generate test summary
        run: |
          echo "## Comprehensive Sync Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Process results and generate statistics
          total_tests=0
          successful_tests=0
          failed_tests=0
          
          # Process each test result
          for test_dir in ./all-results/test-*; do
            if [ -d "$test_dir" ]; then
              total_tests=$((total_tests + 1))
              
              # Try to read metadata if available
              if [ -f "$test_dir/sync-test-results/metadata.json" ]; then
                metadata=$(cat "$test_dir/sync-test-results/metadata.json")
                result=$(echo "$metadata" | jq -r '.result' 2>/dev/null || echo "unknown")
                
                # Count results
                if [ "$result" = "success" ]; then
                  successful_tests=$((successful_tests + 1))
                elif [ "$result" = "failure" ]; then
                  failed_tests=$((failed_tests + 1))
                fi
              fi
            fi
          done
          
          # Calculate success rate
          success_rate=0
          if [ $total_tests -gt 0 ]; then
            success_rate=$((successful_tests * 100 / total_tests))
          fi
          
          echo "**Total Tests:** $total_tests" >> $GITHUB_STEP_SUMMARY
          echo "**Successful:** $successful_tests" >> $GITHUB_STEP_SUMMARY
          echo "**Failed:** $failed_tests" >> $GITHUB_STEP_SUMMARY
          echo "**Success Rate:** $success_rate%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Network | EL Client | CL Client | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----------|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Generate table rows
          for test_dir in ./all-results/test-*; do
            if [ -d "$test_dir" ]; then
              test_name=$(basename "$test_dir")
              network=$(echo "$test_name" | cut -d'-' -f2)
              el_client=$(echo "$test_name" | cut -d'-' -f3)
              cl_client=$(echo "$test_name" | cut -d'-' -f4)
              
              if [ -f "$test_dir/sync-test-results/metadata.json" ]; then
                metadata=$(cat "$test_dir/sync-test-results/metadata.json")
                result=$(echo "$metadata" | jq -r '.result' 2>/dev/null || echo "unknown")
                duration=$(echo "$metadata" | jq -r '.duration' 2>/dev/null || echo "N/A")
                
                # Format result with emoji
                if [ "$result" = "success" ]; then
                  result_display="✅ Success"
                elif [ "$result" = "failure" ]; then
                  result_display="❌ Failure"
                else
                  result_display="❓ Unknown"
                fi
                
                echo "| $network | $el_client | $cl_client | $result_display | ${duration}s |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| $network | $el_client | $cl_client | ❓ Unknown | N/A |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View historical results at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY