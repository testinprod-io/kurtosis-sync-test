name: Prune Data Branch

on:
  schedule:
    # Run monthly on the 1st at 2:00 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      days_to_keep:
        description: 'Number of days of data to keep'
        required: false
        type: number
        default: 90

permissions:
  contents: write

jobs:
  prune-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout data branch
        uses: actions/checkout@v4
        with:
          ref: data
          token: ${{ github.token }}
      
      - name: Prune old test results
        run: |
          # Get the number of days to keep from input or use default
          DAYS_TO_KEEP=${{ github.event.inputs.days_to_keep || '90' }}
          echo "Keeping data from the last $DAYS_TO_KEEP days"
          
          # Calculate cutoff date
          CUTOFF_DATE=$(date -d "$DAYS_TO_KEEP days ago" +%Y-%m-%d)
          echo "Removing data older than $CUTOFF_DATE"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Find and remove old data directories
          removed_count=0
          if [ -d "results" ]; then
            for date_dir in results/*/; do
              if [ -d "$date_dir" ]; then
                dir_date=$(basename "$date_dir")
                
                # Check if directory name is a valid date
                if [[ "$dir_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                  # Compare dates
                  if [[ "$dir_date" < "$CUTOFF_DATE" ]]; then
                    echo "Removing old data: $date_dir"
                    git rm -rf "$date_dir"
                    removed_count=$((removed_count + 1))
                  fi
                fi
              fi
            done
          fi
          
          # Update catalog.json to remove old entries
          if [ -f "catalog.json" ]; then
            echo "Updating catalog.json..."
            
            # Use jq to filter out old dates
            jq --arg cutoff "$CUTOFF_DATE" '
              .dates = (.dates // []) | map(select(.date >= $cutoff))
            ' catalog.json > catalog.json.tmp
            
            mv catalog.json.tmp catalog.json
            git add catalog.json
          fi
          
          # Commit changes if any files were removed
          if [ $removed_count -gt 0 ]; then
            git commit -m "Prune data older than $CUTOFF_DATE ($removed_count date directories removed)"
            git push origin data
            echo "Pruned $removed_count old date directories"
          else
            echo "No old data to prune"
          fi
      
      - name: Generate size report
        run: |
          echo "## Data Branch Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get repository size
          echo "### Repository Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Count files and calculate size
          file_count=$(find . -type f -name "*.json" | wc -l)
          total_size=$(du -sh . | cut -f1)
          
          echo "| Total JSON files | $file_count |" >> $GITHUB_STEP_SUMMARY
          echo "| Total size | $total_size |" >> $GITHUB_STEP_SUMMARY
          
          # Get date range of data
          if [ -d "results" ]; then
            oldest_date=$(ls results/ | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}$' | sort | head -n1)
            newest_date=$(ls results/ | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}$' | sort | tail -n1)
            
            echo "| Oldest data | $oldest_date |" >> $GITHUB_STEP_SUMMARY
            echo "| Newest data | $newest_date |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Data retention period: ${{ github.event.inputs.days_to_keep || '90' }} days" >> $GITHUB_STEP_SUMMARY